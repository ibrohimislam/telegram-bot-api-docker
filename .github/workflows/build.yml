name: Docker multi-arch build and push

on:
  push:
    branches:
      - master
  schedule:
    - cron: '20 4 * * *'

jobs:
  build:
    name: Build Docker image
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ secrets.DOCKERHUB_OWNER }}/telegram-bot-api
      ALPINE_VERSION: 3.19

    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4

      - name: Checkout upstream repo
        uses: actions/checkout@v4
        with:
          repository: ibrohimislam/telegram-bot-api
          path: telegram-bot-api
          submodules: recursive

      - name: Get version
        run: |
          HASH_VERSION=$(git rev-parse --short HEAD)
          VERSION=$(cat telegram-bot-api/CMakeLists.txt | grep TelegramBotApi | cut -d " " -f3)
          IMAGE_TAG=$(echo "$IMAGE_TAG" | awk '{print tolower($0)}')
          VERSION=$(echo "$VERSION" | awk '{print tolower($0)}')
          ARCH=linux/amd64

          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          cat $GITHUB_ENV > github.env

      - name: Upload environment info as artifact
        uses: actions/upload-artifact@v2
        with:
          name: github_env
          path: github.env

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub registry
        uses: docker/login-action@v2
        if: ${{ github.event_name != 'pull_request' }}
        with:
          username: ${{ secrets.DOCKERHUB_LOGIN }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          cache-from: type=gha
          cache-to: type=gha
          platforms: linux/amd64
          build-args: |
            ALPINE_VERSION=${{ env.ALPINE_VERSION }}
          push: true
          load: true
          tags: |
            ${{ env.IMAGE_TAG }}:${{ env.VERSION }}
            ${{ env.IMAGE_TAG }}:latest
